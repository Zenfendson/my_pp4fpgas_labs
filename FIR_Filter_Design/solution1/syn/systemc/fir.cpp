// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fir.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fir::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fir::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> fir::ap_ST_fsm_state1 = "1";
const sc_lv<4> fir::ap_ST_fsm_state2 = "10";
const sc_lv<4> fir::ap_ST_fsm_state3 = "100";
const sc_lv<4> fir::ap_ST_fsm_state4 = "1000";
const sc_lv<32> fir::ap_const_lv32_0 = "00000000000000000000000000000000";
const int fir::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> fir::ap_const_lv32_1 = "1";
const sc_lv<32> fir::ap_const_lv32_2 = "10";
const sc_lv<32> fir::ap_const_lv32_3 = "11";
const sc_lv<32> fir::ap_const_lv32_1F4 = "111110100";
const sc_lv<32> fir::ap_const_lv32_139 = "100111001";
const sc_lv<32> fir::ap_const_lv32_FFFFFFA5 = "11111111111111111111111110100101";
const sc_lv<32> fir::ap_const_lv32_35 = "110101";
const bool fir::ap_const_boolean_1 = true;

fir::fir(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fir_ap_start_s_axi_U = new fir_ap_start_s_axi<C_S_AXI_AP_START_ADDR_WIDTH,C_S_AXI_AP_START_DATA_WIDTH>("fir_ap_start_s_axi_U");
    fir_ap_start_s_axi_U->AWVALID(s_axi_ap_start_AWVALID);
    fir_ap_start_s_axi_U->AWREADY(s_axi_ap_start_AWREADY);
    fir_ap_start_s_axi_U->AWADDR(s_axi_ap_start_AWADDR);
    fir_ap_start_s_axi_U->WVALID(s_axi_ap_start_WVALID);
    fir_ap_start_s_axi_U->WREADY(s_axi_ap_start_WREADY);
    fir_ap_start_s_axi_U->WDATA(s_axi_ap_start_WDATA);
    fir_ap_start_s_axi_U->WSTRB(s_axi_ap_start_WSTRB);
    fir_ap_start_s_axi_U->ARVALID(s_axi_ap_start_ARVALID);
    fir_ap_start_s_axi_U->ARREADY(s_axi_ap_start_ARREADY);
    fir_ap_start_s_axi_U->ARADDR(s_axi_ap_start_ARADDR);
    fir_ap_start_s_axi_U->RVALID(s_axi_ap_start_RVALID);
    fir_ap_start_s_axi_U->RREADY(s_axi_ap_start_RREADY);
    fir_ap_start_s_axi_U->RDATA(s_axi_ap_start_RDATA);
    fir_ap_start_s_axi_U->RRESP(s_axi_ap_start_RRESP);
    fir_ap_start_s_axi_U->BVALID(s_axi_ap_start_BVALID);
    fir_ap_start_s_axi_U->BREADY(s_axi_ap_start_BREADY);
    fir_ap_start_s_axi_U->BRESP(s_axi_ap_start_BRESP);
    fir_ap_start_s_axi_U->ACLK(ap_clk);
    fir_ap_start_s_axi_U->ARESET(ap_rst_n_inv);
    fir_ap_start_s_axi_U->ACLK_EN(ap_var_for_const0);
    fir_ap_start_s_axi_U->ap_start(ap_start);
    fir_ap_start_s_axi_U->interrupt(interrupt);
    fir_ap_start_s_axi_U->ap_ready(ap_ready);
    fir_ap_start_s_axi_U->ap_done(ap_done);
    fir_ap_start_s_axi_U->ap_idle(ap_idle);
    fir_ap_start_s_axi_U->y_V(y_V);
    fir_ap_start_s_axi_U->y_V_ap_vld(y_V_ap_vld);
    fir_ap_start_s_axi_U->x_V(x_V);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln700_1_fu_222_p2);
    sensitive << ( mul_ln700_reg_264 );
    sensitive << ( add_ln700_fu_218_p2 );

    SC_METHOD(thread_add_ln700_2_fu_204_p2);
    sensitive << ( mul_ln700_3_reg_244 );
    sensitive << ( mul_ln700_4_reg_249 );

    SC_METHOD(thread_add_ln700_3_fu_208_p2);
    sensitive << ( mul_ln700_5_reg_254 );
    sensitive << ( mul_ln700_6_reg_259 );

    SC_METHOD(thread_add_ln700_4_fu_212_p2);
    sensitive << ( add_ln700_3_fu_208_p2 );
    sensitive << ( add_ln700_2_fu_204_p2 );

    SC_METHOD(thread_add_ln700_fu_218_p2);
    sensitive << ( mul_ln700_1_reg_269 );
    sensitive << ( mul_ln700_2_reg_274 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_mul_ln700_1_fu_192_p0);
    sensitive << ( shift_reg_V_7 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mul_ln700_1_fu_192_p2);
    sensitive << ( mul_ln700_1_fu_192_p0 );

    SC_METHOD(thread_mul_ln700_2_fu_198_p0);
    sensitive << ( shift_reg_V_5 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mul_ln700_2_fu_198_p2);
    sensitive << ( mul_ln700_2_fu_198_p0 );

    SC_METHOD(thread_mul_ln700_3_fu_114_p0);
    sensitive << ( shift_reg_V_4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_mul_ln700_3_fu_114_p2);
    sensitive << ( mul_ln700_3_fu_114_p0 );

    SC_METHOD(thread_mul_ln700_4_fu_120_p0);
    sensitive << ( shift_reg_V_3 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_mul_ln700_4_fu_120_p2);
    sensitive << ( mul_ln700_4_fu_120_p0 );

    SC_METHOD(thread_mul_ln700_5_fu_126_p0);
    sensitive << ( shift_reg_V_1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_mul_ln700_5_fu_126_p2);
    sensitive << ( mul_ln700_5_fu_126_p0 );

    SC_METHOD(thread_mul_ln700_6_fu_132_p2);
    sensitive << ( x_V_read_reg_233 );

    SC_METHOD(thread_mul_ln700_fu_186_p0);
    sensitive << ( shift_reg_V_9 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mul_ln700_fu_186_p2);
    sensitive << ( mul_ln700_fu_186_p0 );

    SC_METHOD(thread_y_V);
    sensitive << ( add_ln700_4_reg_279 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( add_ln700_1_fu_222_p2 );

    SC_METHOD(thread_y_V_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0001";
    shift_reg_V_9 = "00000000000000000000000000000000";
    shift_reg_V_8 = "00000000000000000000000000000000";
    shift_reg_V_7 = "00000000000000000000000000000000";
    shift_reg_V_6 = "00000000000000000000000000000000";
    shift_reg_V_5 = "00000000000000000000000000000000";
    shift_reg_V_4 = "00000000000000000000000000000000";
    shift_reg_V_3 = "00000000000000000000000000000000";
    shift_reg_V_2 = "00000000000000000000000000000000";
    shift_reg_V_1 = "00000000000000000000000000000000";
    shift_reg_V_0 = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fir_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_ap_start_AWVALID, "(port)s_axi_ap_start_AWVALID");
    sc_trace(mVcdFile, s_axi_ap_start_AWREADY, "(port)s_axi_ap_start_AWREADY");
    sc_trace(mVcdFile, s_axi_ap_start_AWADDR, "(port)s_axi_ap_start_AWADDR");
    sc_trace(mVcdFile, s_axi_ap_start_WVALID, "(port)s_axi_ap_start_WVALID");
    sc_trace(mVcdFile, s_axi_ap_start_WREADY, "(port)s_axi_ap_start_WREADY");
    sc_trace(mVcdFile, s_axi_ap_start_WDATA, "(port)s_axi_ap_start_WDATA");
    sc_trace(mVcdFile, s_axi_ap_start_WSTRB, "(port)s_axi_ap_start_WSTRB");
    sc_trace(mVcdFile, s_axi_ap_start_ARVALID, "(port)s_axi_ap_start_ARVALID");
    sc_trace(mVcdFile, s_axi_ap_start_ARREADY, "(port)s_axi_ap_start_ARREADY");
    sc_trace(mVcdFile, s_axi_ap_start_ARADDR, "(port)s_axi_ap_start_ARADDR");
    sc_trace(mVcdFile, s_axi_ap_start_RVALID, "(port)s_axi_ap_start_RVALID");
    sc_trace(mVcdFile, s_axi_ap_start_RREADY, "(port)s_axi_ap_start_RREADY");
    sc_trace(mVcdFile, s_axi_ap_start_RDATA, "(port)s_axi_ap_start_RDATA");
    sc_trace(mVcdFile, s_axi_ap_start_RRESP, "(port)s_axi_ap_start_RRESP");
    sc_trace(mVcdFile, s_axi_ap_start_BVALID, "(port)s_axi_ap_start_BVALID");
    sc_trace(mVcdFile, s_axi_ap_start_BREADY, "(port)s_axi_ap_start_BREADY");
    sc_trace(mVcdFile, s_axi_ap_start_BRESP, "(port)s_axi_ap_start_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, y_V, "y_V");
    sc_trace(mVcdFile, y_V_ap_vld, "y_V_ap_vld");
    sc_trace(mVcdFile, x_V, "x_V");
    sc_trace(mVcdFile, shift_reg_V_9, "shift_reg_V_9");
    sc_trace(mVcdFile, shift_reg_V_8, "shift_reg_V_8");
    sc_trace(mVcdFile, shift_reg_V_7, "shift_reg_V_7");
    sc_trace(mVcdFile, shift_reg_V_6, "shift_reg_V_6");
    sc_trace(mVcdFile, shift_reg_V_5, "shift_reg_V_5");
    sc_trace(mVcdFile, shift_reg_V_4, "shift_reg_V_4");
    sc_trace(mVcdFile, shift_reg_V_3, "shift_reg_V_3");
    sc_trace(mVcdFile, shift_reg_V_2, "shift_reg_V_2");
    sc_trace(mVcdFile, shift_reg_V_1, "shift_reg_V_1");
    sc_trace(mVcdFile, shift_reg_V_0, "shift_reg_V_0");
    sc_trace(mVcdFile, x_V_read_reg_233, "x_V_read_reg_233");
    sc_trace(mVcdFile, shift_reg_V_4_load_reg_239, "shift_reg_V_4_load_reg_239");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, mul_ln700_3_fu_114_p2, "mul_ln700_3_fu_114_p2");
    sc_trace(mVcdFile, mul_ln700_3_reg_244, "mul_ln700_3_reg_244");
    sc_trace(mVcdFile, mul_ln700_4_fu_120_p2, "mul_ln700_4_fu_120_p2");
    sc_trace(mVcdFile, mul_ln700_4_reg_249, "mul_ln700_4_reg_249");
    sc_trace(mVcdFile, mul_ln700_5_fu_126_p2, "mul_ln700_5_fu_126_p2");
    sc_trace(mVcdFile, mul_ln700_5_reg_254, "mul_ln700_5_reg_254");
    sc_trace(mVcdFile, mul_ln700_6_fu_132_p2, "mul_ln700_6_fu_132_p2");
    sc_trace(mVcdFile, mul_ln700_6_reg_259, "mul_ln700_6_reg_259");
    sc_trace(mVcdFile, mul_ln700_fu_186_p2, "mul_ln700_fu_186_p2");
    sc_trace(mVcdFile, mul_ln700_reg_264, "mul_ln700_reg_264");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, mul_ln700_1_fu_192_p2, "mul_ln700_1_fu_192_p2");
    sc_trace(mVcdFile, mul_ln700_1_reg_269, "mul_ln700_1_reg_269");
    sc_trace(mVcdFile, mul_ln700_2_fu_198_p2, "mul_ln700_2_fu_198_p2");
    sc_trace(mVcdFile, mul_ln700_2_reg_274, "mul_ln700_2_reg_274");
    sc_trace(mVcdFile, add_ln700_4_fu_212_p2, "add_ln700_4_fu_212_p2");
    sc_trace(mVcdFile, add_ln700_4_reg_279, "add_ln700_4_reg_279");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, mul_ln700_3_fu_114_p0, "mul_ln700_3_fu_114_p0");
    sc_trace(mVcdFile, mul_ln700_4_fu_120_p0, "mul_ln700_4_fu_120_p0");
    sc_trace(mVcdFile, mul_ln700_5_fu_126_p0, "mul_ln700_5_fu_126_p0");
    sc_trace(mVcdFile, mul_ln700_fu_186_p0, "mul_ln700_fu_186_p0");
    sc_trace(mVcdFile, mul_ln700_1_fu_192_p0, "mul_ln700_1_fu_192_p0");
    sc_trace(mVcdFile, mul_ln700_2_fu_198_p0, "mul_ln700_2_fu_198_p0");
    sc_trace(mVcdFile, add_ln700_3_fu_208_p2, "add_ln700_3_fu_208_p2");
    sc_trace(mVcdFile, add_ln700_2_fu_204_p2, "add_ln700_2_fu_204_p2");
    sc_trace(mVcdFile, add_ln700_fu_218_p2, "add_ln700_fu_218_p2");
    sc_trace(mVcdFile, add_ln700_1_fu_222_p2, "add_ln700_1_fu_222_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fir.hdltvin.dat");
    mHdltvoutHandle.open("fir.hdltvout.dat");
}

fir::~fir() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete fir_ap_start_s_axi_U;
}

void fir::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fir::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        add_ln700_4_reg_279 = add_ln700_4_fu_212_p2.read();
        mul_ln700_1_reg_269 = mul_ln700_1_fu_192_p2.read();
        mul_ln700_2_reg_274 = mul_ln700_2_fu_198_p2.read();
        mul_ln700_reg_264 = mul_ln700_fu_186_p2.read();
        shift_reg_V_5 = shift_reg_V_4_load_reg_239.read();
        shift_reg_V_6 = shift_reg_V_5.read();
        shift_reg_V_7 = shift_reg_V_6.read();
        shift_reg_V_8 = shift_reg_V_7.read();
        shift_reg_V_9 = shift_reg_V_8.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        mul_ln700_3_reg_244 = mul_ln700_3_fu_114_p2.read();
        mul_ln700_4_reg_249 = mul_ln700_4_fu_120_p2.read();
        mul_ln700_5_reg_254 = mul_ln700_5_fu_126_p2.read();
        mul_ln700_6_reg_259 = mul_ln700_6_fu_132_p2.read();
        shift_reg_V_0 = x_V_read_reg_233.read();
        shift_reg_V_1 = shift_reg_V_0.read();
        shift_reg_V_2 = shift_reg_V_1.read();
        shift_reg_V_3 = shift_reg_V_2.read();
        shift_reg_V_4 = shift_reg_V_3.read();
        shift_reg_V_4_load_reg_239 = shift_reg_V_4.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        x_V_read_reg_233 = x_V.read();
    }
}

void fir::thread_add_ln700_1_fu_222_p2() {
    add_ln700_1_fu_222_p2 = (!add_ln700_fu_218_p2.read().is_01() || !mul_ln700_reg_264.read().is_01())? sc_lv<32>(): (sc_biguint<32>(add_ln700_fu_218_p2.read()) + sc_biguint<32>(mul_ln700_reg_264.read()));
}

void fir::thread_add_ln700_2_fu_204_p2() {
    add_ln700_2_fu_204_p2 = (!mul_ln700_3_reg_244.read().is_01() || !mul_ln700_4_reg_249.read().is_01())? sc_lv<32>(): (sc_biguint<32>(mul_ln700_3_reg_244.read()) + sc_biguint<32>(mul_ln700_4_reg_249.read()));
}

void fir::thread_add_ln700_3_fu_208_p2() {
    add_ln700_3_fu_208_p2 = (!mul_ln700_5_reg_254.read().is_01() || !mul_ln700_6_reg_259.read().is_01())? sc_lv<32>(): (sc_biguint<32>(mul_ln700_5_reg_254.read()) + sc_biguint<32>(mul_ln700_6_reg_259.read()));
}

void fir::thread_add_ln700_4_fu_212_p2() {
    add_ln700_4_fu_212_p2 = (!add_ln700_3_fu_208_p2.read().is_01() || !add_ln700_2_fu_204_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(add_ln700_3_fu_208_p2.read()) + sc_biguint<32>(add_ln700_2_fu_204_p2.read()));
}

void fir::thread_add_ln700_fu_218_p2() {
    add_ln700_fu_218_p2 = (!mul_ln700_1_reg_269.read().is_01() || !mul_ln700_2_reg_274.read().is_01())? sc_lv<32>(): (sc_biguint<32>(mul_ln700_1_reg_269.read()) + sc_biguint<32>(mul_ln700_2_reg_274.read()));
}

void fir::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fir::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fir::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fir::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fir::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fir::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fir::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fir::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void fir::thread_mul_ln700_1_fu_192_p0() {
    mul_ln700_1_fu_192_p0 = shift_reg_V_7.read();
}

void fir::thread_mul_ln700_1_fu_192_p2() {
    mul_ln700_1_fu_192_p2 = (!mul_ln700_1_fu_192_p0.read().is_01() || !ap_const_lv32_FFFFFFA5.is_01())? sc_lv<32>(): sc_bigint<32>(mul_ln700_1_fu_192_p0.read()) * sc_bigint<32>(ap_const_lv32_FFFFFFA5);
}

void fir::thread_mul_ln700_2_fu_198_p0() {
    mul_ln700_2_fu_198_p0 = shift_reg_V_5.read();
}

void fir::thread_mul_ln700_2_fu_198_p2() {
    mul_ln700_2_fu_198_p2 = (!mul_ln700_2_fu_198_p0.read().is_01() || !ap_const_lv32_139.is_01())? sc_lv<32>(): sc_bigint<32>(mul_ln700_2_fu_198_p0.read()) * sc_biguint<32>(ap_const_lv32_139);
}

void fir::thread_mul_ln700_3_fu_114_p0() {
    mul_ln700_3_fu_114_p0 = shift_reg_V_4.read();
}

void fir::thread_mul_ln700_3_fu_114_p2() {
    mul_ln700_3_fu_114_p2 = (!mul_ln700_3_fu_114_p0.read().is_01() || !ap_const_lv32_1F4.is_01())? sc_lv<32>(): sc_bigint<32>(mul_ln700_3_fu_114_p0.read()) * sc_biguint<32>(ap_const_lv32_1F4);
}

void fir::thread_mul_ln700_4_fu_120_p0() {
    mul_ln700_4_fu_120_p0 = shift_reg_V_3.read();
}

void fir::thread_mul_ln700_4_fu_120_p2() {
    mul_ln700_4_fu_120_p2 = (!mul_ln700_4_fu_120_p0.read().is_01() || !ap_const_lv32_139.is_01())? sc_lv<32>(): sc_bigint<32>(mul_ln700_4_fu_120_p0.read()) * sc_biguint<32>(ap_const_lv32_139);
}

void fir::thread_mul_ln700_5_fu_126_p0() {
    mul_ln700_5_fu_126_p0 = shift_reg_V_1.read();
}

void fir::thread_mul_ln700_5_fu_126_p2() {
    mul_ln700_5_fu_126_p2 = (!mul_ln700_5_fu_126_p0.read().is_01() || !ap_const_lv32_FFFFFFA5.is_01())? sc_lv<32>(): sc_bigint<32>(mul_ln700_5_fu_126_p0.read()) * sc_bigint<32>(ap_const_lv32_FFFFFFA5);
}

void fir::thread_mul_ln700_6_fu_132_p2() {
    mul_ln700_6_fu_132_p2 = (!x_V_read_reg_233.read().is_01() || !ap_const_lv32_35.is_01())? sc_lv<32>(): sc_bigint<32>(x_V_read_reg_233.read()) * sc_biguint<32>(ap_const_lv32_35);
}

void fir::thread_mul_ln700_fu_186_p0() {
    mul_ln700_fu_186_p0 = shift_reg_V_9.read();
}

void fir::thread_mul_ln700_fu_186_p2() {
    mul_ln700_fu_186_p2 = (!mul_ln700_fu_186_p0.read().is_01() || !ap_const_lv32_35.is_01())? sc_lv<32>(): sc_bigint<32>(mul_ln700_fu_186_p0.read()) * sc_biguint<32>(ap_const_lv32_35);
}

void fir::thread_y_V() {
    y_V = (!add_ln700_4_reg_279.read().is_01() || !add_ln700_1_fu_222_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(add_ln700_4_reg_279.read()) + sc_biguint<32>(add_ln700_1_fu_222_p2.read()));
}

void fir::thread_y_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        y_V_ap_vld = ap_const_logic_1;
    } else {
        y_V_ap_vld = ap_const_logic_0;
    }
}

void fir::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void fir::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ap_start_AWVALID\" :  \"" << s_axi_ap_start_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_ap_start_AWREADY\" :  \"" << s_axi_ap_start_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ap_start_AWADDR\" :  \"" << s_axi_ap_start_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ap_start_WVALID\" :  \"" << s_axi_ap_start_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ap_start_WREADY\" :  \"" << s_axi_ap_start_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ap_start_WDATA\" :  \"" << s_axi_ap_start_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ap_start_WSTRB\" :  \"" << s_axi_ap_start_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ap_start_ARVALID\" :  \"" << s_axi_ap_start_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ap_start_ARREADY\" :  \"" << s_axi_ap_start_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ap_start_ARADDR\" :  \"" << s_axi_ap_start_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ap_start_RVALID\" :  \"" << s_axi_ap_start_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ap_start_RREADY\" :  \"" << s_axi_ap_start_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ap_start_RDATA\" :  \"" << s_axi_ap_start_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ap_start_RRESP\" :  \"" << s_axi_ap_start_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ap_start_BVALID\" :  \"" << s_axi_ap_start_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ap_start_BREADY\" :  \"" << s_axi_ap_start_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ap_start_BRESP\" :  \"" << s_axi_ap_start_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

