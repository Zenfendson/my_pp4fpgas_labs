// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cordiccart2pol,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=258,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=13,HLS_SYN_FF=2132,HLS_SYN_LUT=4003,HLS_VERSION=2020_1}" *)

module cordiccart2pol (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        y,
        r,
        r_ap_vld,
        theta,
        theta_ap_vld
);

parameter    ap_ST_fsm_state1 = 33'd1;
parameter    ap_ST_fsm_state2 = 33'd2;
parameter    ap_ST_fsm_state3 = 33'd4;
parameter    ap_ST_fsm_state4 = 33'd8;
parameter    ap_ST_fsm_state5 = 33'd16;
parameter    ap_ST_fsm_state6 = 33'd32;
parameter    ap_ST_fsm_state7 = 33'd64;
parameter    ap_ST_fsm_state8 = 33'd128;
parameter    ap_ST_fsm_state9 = 33'd256;
parameter    ap_ST_fsm_state10 = 33'd512;
parameter    ap_ST_fsm_state11 = 33'd1024;
parameter    ap_ST_fsm_state12 = 33'd2048;
parameter    ap_ST_fsm_state13 = 33'd4096;
parameter    ap_ST_fsm_state14 = 33'd8192;
parameter    ap_ST_fsm_state15 = 33'd16384;
parameter    ap_ST_fsm_state16 = 33'd32768;
parameter    ap_ST_fsm_state17 = 33'd65536;
parameter    ap_ST_fsm_state18 = 33'd131072;
parameter    ap_ST_fsm_state19 = 33'd262144;
parameter    ap_ST_fsm_state20 = 33'd524288;
parameter    ap_ST_fsm_state21 = 33'd1048576;
parameter    ap_ST_fsm_state22 = 33'd2097152;
parameter    ap_ST_fsm_state23 = 33'd4194304;
parameter    ap_ST_fsm_state24 = 33'd8388608;
parameter    ap_ST_fsm_state25 = 33'd16777216;
parameter    ap_ST_fsm_state26 = 33'd33554432;
parameter    ap_ST_fsm_state27 = 33'd67108864;
parameter    ap_ST_fsm_state28 = 33'd134217728;
parameter    ap_ST_fsm_state29 = 33'd268435456;
parameter    ap_ST_fsm_state30 = 33'd536870912;
parameter    ap_ST_fsm_state31 = 33'd1073741824;
parameter    ap_ST_fsm_state32 = 33'd2147483648;
parameter    ap_ST_fsm_state33 = 33'd4294967296;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x;
input  [31:0] y;
output  [31:0] r;
output   r_ap_vld;
output  [31:0] theta;
output   theta_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg r_ap_vld;
reg theta_ap_vld;

(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] Kvalues_address0;
reg    Kvalues_ce0;
wire   [31:0] Kvalues_q0;
wire   [3:0] angles_address0;
reg    angles_ce0;
wire   [31:0] angles_q0;
wire   [31:0] grp_fu_166_p2;
reg   [31:0] reg_200;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_171_p2;
reg   [31:0] reg_206;
wire   [0:0] grp_fu_187_p2;
reg   [0:0] tmp_1_reg_461;
wire    ap_CS_fsm_state2;
wire   [0:0] grp_fu_193_p2;
reg   [0:0] tmp_6_reg_466;
wire   [31:0] select_ln24_fu_325_p3;
wire    ap_CS_fsm_state3;
wire   [31:0] select_ln24_1_fu_338_p3;
wire   [31:0] select_ln24_2_fu_354_p3;
wire   [4:0] i_fu_368_p2;
reg   [4:0] i_reg_489;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln39_fu_362_p2;
wire   [0:0] icmp_ln41_fu_398_p2;
reg   [0:0] icmp_ln41_reg_504;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln41_1_fu_404_p2;
reg   [0:0] icmp_ln41_1_reg_509;
reg   [0:0] tmp_10_reg_514;
reg   [31:0] factor_reg_519;
reg   [31:0] angles_load_reg_525;
wire   [31:0] select_ln46_fu_419_p3;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_176_p2;
reg   [31:0] tmp_3_reg_537;
wire   [31:0] grp_fu_155_p2;
reg   [31:0] theta1_reg_542;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state18;
wire   [31:0] grp_fu_161_p2;
reg   [31:0] temp_cos_reg_114;
reg   [31:0] currenty_2_reg_124;
reg   [31:0] theta1_2_reg_134;
reg   [4:0] i_0_reg_144;
wire   [63:0] zext_ln42_fu_374_p1;
wire    ap_CS_fsm_state24;
wire   [31:0] grp_fu_180_p2;
wire    ap_CS_fsm_state33;
reg   [31:0] grp_fu_155_p0;
reg   [31:0] grp_fu_155_p1;
wire    ap_CS_fsm_state10;
reg   [31:0] grp_fu_166_p0;
reg   [31:0] grp_fu_166_p1;
reg   [31:0] grp_fu_171_p0;
reg   [31:0] grp_fu_171_p1;
wire   [31:0] grp_fu_176_p0;
reg   [31:0] grp_fu_187_p0;
wire   [31:0] bitcast_ln16_fu_212_p1;
wire   [7:0] tmp_fu_215_p4;
wire   [22:0] trunc_ln16_fu_225_p1;
wire   [0:0] icmp_ln16_1_fu_235_p2;
wire   [0:0] icmp_ln16_fu_229_p2;
wire   [0:0] or_ln16_fu_241_p2;
wire   [31:0] bitcast_ln24_fu_252_p1;
wire   [7:0] tmp_5_fu_255_p4;
wire   [22:0] trunc_ln24_fu_265_p1;
wire   [0:0] icmp_ln24_1_fu_275_p2;
wire   [0:0] icmp_ln24_fu_269_p2;
wire   [0:0] or_ln24_fu_281_p2;
wire   [31:0] xor_ln33_fu_292_p2;
wire   [31:0] xor_ln26_fu_302_p2;
wire   [0:0] and_ln16_fu_247_p2;
wire   [31:0] currentx_fu_308_p1;
wire   [0:0] and_ln24_fu_287_p2;
wire   [0:0] or_ln24_1_fu_319_p2;
wire   [31:0] select_ln16_fu_312_p3;
wire   [31:0] select_ln16_1_fu_332_p3;
wire   [31:0] currenty_fu_298_p1;
wire   [31:0] select_ln16_2_fu_346_p3;
wire   [31:0] bitcast_ln41_fu_380_p1;
wire   [7:0] tmp_9_fu_384_p4;
wire   [22:0] trunc_ln41_fu_394_p1;
wire   [0:0] or_ln41_fu_410_p2;
wire   [0:0] and_ln41_fu_414_p2;
wire   [31:0] bitcast_ln54_fu_430_p1;
wire   [31:0] xor_ln54_fu_434_p2;
reg   [1:0] grp_fu_155_opcode;
reg   [4:0] grp_fu_187_opcode;
reg   [32:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 33'd1;
end

cordiccart2pol_Kvbkb #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
Kvalues_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Kvalues_address0),
    .ce0(Kvalues_ce0),
    .q0(Kvalues_q0)
);

cordiccart2pol_ancud #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
angles_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(angles_address0),
    .ce0(angles_ce0),
    .q0(angles_q0)
);

cordiccart2pol_fadEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cordiccart2pol_fadEe_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_155_p0),
    .din1(grp_fu_155_p1),
    .opcode(grp_fu_155_opcode),
    .ce(1'b1),
    .dout(grp_fu_155_p2)
);

cordiccart2pol_faeOg #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cordiccart2pol_faeOg_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_206),
    .din1(currenty_2_reg_124),
    .ce(1'b1),
    .dout(grp_fu_161_p2)
);

cordiccart2pol_fmfYi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cordiccart2pol_fmfYi_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_166_p0),
    .din1(grp_fu_166_p1),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

cordiccart2pol_fmfYi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cordiccart2pol_fmfYi_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_171_p0),
    .din1(grp_fu_171_p1),
    .ce(1'b1),
    .dout(grp_fu_171_p2)
);

cordiccart2pol_fmfYi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cordiccart2pol_fmfYi_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_176_p0),
    .din1(angles_load_reg_525),
    .ce(1'b1),
    .dout(grp_fu_176_p2)
);

cordiccart2pol_fdg8j #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cordiccart2pol_fdg8j_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_cos_reg_114),
    .din1(32'd1070778634),
    .ce(1'b1),
    .dout(grp_fu_180_p2)
);

cordiccart2pol_fchbi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cordiccart2pol_fchbi_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_187_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(grp_fu_187_opcode),
    .dout(grp_fu_187_p2)
);

cordiccart2pol_fchbi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cordiccart2pol_fchbi_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_193_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        currenty_2_reg_124 <= select_ln24_1_fu_338_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        currenty_2_reg_124 <= grp_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_144 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i_0_reg_144 <= i_reg_489;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        temp_cos_reg_114 <= select_ln24_fu_325_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_cos_reg_114 <= grp_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        theta1_2_reg_134 <= select_ln24_2_fu_354_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        theta1_2_reg_134 <= theta1_reg_542;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        angles_load_reg_525 <= angles_q0;
        factor_reg_519 <= Kvalues_q0;
        icmp_ln41_1_reg_509 <= icmp_ln41_1_fu_404_p2;
        icmp_ln41_reg_504 <= icmp_ln41_fu_398_p2;
        tmp_10_reg_514 <= grp_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_489 <= i_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_200 <= grp_fu_166_p2;
        reg_206 <= grp_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        theta1_reg_542 <= grp_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_1_reg_461 <= grp_fu_187_p2;
        tmp_6_reg_466 <= grp_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_3_reg_537 <= grp_fu_176_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Kvalues_ce0 = 1'b1;
    end else begin
        Kvalues_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        angles_ce0 = 1'b1;
    end else begin
        angles_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_155_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_155_opcode = 2'd0;
    end else begin
        grp_fu_155_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_155_p0 = temp_cos_reg_114;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_155_p0 = theta1_2_reg_134;
    end else begin
        grp_fu_155_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_155_p1 = reg_200;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_155_p1 = tmp_3_reg_537;
    end else begin
        grp_fu_155_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_166_p0 = reg_200;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_166_p0 = currenty_2_reg_124;
    end else begin
        grp_fu_166_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_166_p1 = factor_reg_519;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_166_p1 = select_ln46_fu_419_p3;
    end else begin
        grp_fu_166_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_171_p0 = reg_206;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_171_p0 = temp_cos_reg_114;
    end else begin
        grp_fu_171_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_171_p1 = factor_reg_519;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_171_p1 = select_ln46_fu_419_p3;
    end else begin
        grp_fu_171_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln39_fu_362_p2 == 1'd0))) begin
        grp_fu_187_opcode = 5'd4;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_187_opcode = 5'd3;
    end else begin
        grp_fu_187_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_187_p0 = currenty_2_reg_124;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_187_p0 = x;
    end else begin
        grp_fu_187_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        r_ap_vld = 1'b1;
    end else begin
        r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        theta_ap_vld = 1'b1;
    end else begin
        theta_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln39_fu_362_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Kvalues_address0 = zext_ln42_fu_374_p1;

assign and_ln16_fu_247_p2 = (tmp_1_reg_461 & or_ln16_fu_241_p2);

assign and_ln24_fu_287_p2 = (tmp_6_reg_466 & or_ln24_fu_281_p2);

assign and_ln41_fu_414_p2 = (tmp_10_reg_514 & or_ln41_fu_410_p2);

assign angles_address0 = zext_ln42_fu_374_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln16_fu_212_p1 = x;

assign bitcast_ln24_fu_252_p1 = y;

assign bitcast_ln41_fu_380_p1 = currenty_2_reg_124;

assign bitcast_ln54_fu_430_p1 = theta1_2_reg_134;

assign currentx_fu_308_p1 = xor_ln26_fu_302_p2;

assign currenty_fu_298_p1 = xor_ln33_fu_292_p2;

assign grp_fu_176_p0 = ((and_ln41_fu_414_p2[0:0] === 1'b1) ? 32'd1065353216 : 32'd3212836864);

assign i_fu_368_p2 = (i_0_reg_144 + 5'd1);

assign icmp_ln16_1_fu_235_p2 = ((trunc_ln16_fu_225_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_229_p2 = ((tmp_fu_215_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln24_1_fu_275_p2 = ((trunc_ln24_fu_265_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_269_p2 = ((tmp_5_fu_255_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_362_p2 = ((i_0_reg_144 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln41_1_fu_404_p2 = ((trunc_ln41_fu_394_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_398_p2 = ((tmp_9_fu_384_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln16_fu_241_p2 = (icmp_ln16_fu_229_p2 | icmp_ln16_1_fu_235_p2);

assign or_ln24_1_fu_319_p2 = (and_ln24_fu_287_p2 | and_ln16_fu_247_p2);

assign or_ln24_fu_281_p2 = (icmp_ln24_fu_269_p2 | icmp_ln24_1_fu_275_p2);

assign or_ln41_fu_410_p2 = (icmp_ln41_reg_504 | icmp_ln41_1_reg_509);

assign r = grp_fu_180_p2;

assign select_ln16_1_fu_332_p3 = ((and_ln16_fu_247_p2[0:0] === 1'b1) ? y : x);

assign select_ln16_2_fu_346_p3 = ((and_ln16_fu_247_p2[0:0] === 1'b1) ? 32'd0 : 32'd1070141403);

assign select_ln16_fu_312_p3 = ((and_ln16_fu_247_p2[0:0] === 1'b1) ? x : currentx_fu_308_p1);

assign select_ln24_1_fu_338_p3 = ((or_ln24_1_fu_319_p2[0:0] === 1'b1) ? select_ln16_1_fu_332_p3 : currenty_fu_298_p1);

assign select_ln24_2_fu_354_p3 = ((or_ln24_1_fu_319_p2[0:0] === 1'b1) ? select_ln16_2_fu_346_p3 : 32'd3217625051);

assign select_ln24_fu_325_p3 = ((or_ln24_1_fu_319_p2[0:0] === 1'b1) ? select_ln16_fu_312_p3 : y);

assign select_ln46_fu_419_p3 = ((and_ln41_fu_414_p2[0:0] === 1'b1) ? 32'd1065353216 : 32'd3212836864);

assign theta = xor_ln54_fu_434_p2;

assign tmp_5_fu_255_p4 = {{bitcast_ln24_fu_252_p1[30:23]}};

assign tmp_9_fu_384_p4 = {{bitcast_ln41_fu_380_p1[30:23]}};

assign tmp_fu_215_p4 = {{bitcast_ln16_fu_212_p1[30:23]}};

assign trunc_ln16_fu_225_p1 = bitcast_ln16_fu_212_p1[22:0];

assign trunc_ln24_fu_265_p1 = bitcast_ln24_fu_252_p1[22:0];

assign trunc_ln41_fu_394_p1 = bitcast_ln41_fu_380_p1[22:0];

assign xor_ln26_fu_302_p2 = (bitcast_ln24_fu_252_p1 ^ 32'd2147483648);

assign xor_ln33_fu_292_p2 = (bitcast_ln16_fu_212_p1 ^ 32'd2147483648);

assign xor_ln54_fu_434_p2 = (bitcast_ln54_fu_430_p1 ^ 32'd2147483648);

assign zext_ln42_fu_374_p1 = i_0_reg_144;

endmodule //cordiccart2pol
