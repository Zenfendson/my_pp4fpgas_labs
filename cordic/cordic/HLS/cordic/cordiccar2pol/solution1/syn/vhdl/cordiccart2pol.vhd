-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordiccart2pol is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    y : IN STD_LOGIC_VECTOR (31 downto 0);
    r : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_ap_vld : OUT STD_LOGIC;
    theta : OUT STD_LOGIC_VECTOR (31 downto 0);
    theta_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cordiccart2pol is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cordiccart2pol,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=258,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=13,HLS_SYN_FF=2132,HLS_SYN_LUT=4003,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3FD2C90A : STD_LOGIC_VECTOR (31 downto 0) := "00111111110100101100100100001010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_3FC90FDB : STD_LOGIC_VECTOR (31 downto 0) := "00111111110010010000111111011011";
    constant ap_const_lv32_BFC90FDB : STD_LOGIC_VECTOR (31 downto 0) := "10111111110010010000111111011011";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Kvalues_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Kvalues_ce0 : STD_LOGIC;
    signal Kvalues_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal angles_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal angles_ce0 : STD_LOGIC;
    signal angles_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_461 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_466 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_fu_325_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal select_ln24_1_fu_338_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln24_2_fu_354_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_368_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_489 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln39_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_504 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln41_1_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_1_reg_509 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_514 : STD_LOGIC_VECTOR (0 downto 0);
    signal factor_reg_519 : STD_LOGIC_VECTOR (31 downto 0);
    signal angles_load_reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln46_fu_419_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal theta1_reg_542 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_cos_reg_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal currenty_2_reg_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal theta1_2_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_144 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln42_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_155_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_155_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_166_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_171_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_171_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_176_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_187_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln16_fu_212_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_215_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln16_fu_225_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln16_1_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln16_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln24_fu_252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_255_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln24_fu_265_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln24_1_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln33_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln26_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln16_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal currentx_fu_308_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln24_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_1_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_fu_312_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln16_1_fu_332_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal currenty_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln16_2_fu_346_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln41_fu_380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_384_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln41_fu_394_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln41_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln54_fu_430_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln54_fu_434_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_155_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_187_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);

    component cordiccart2pol_fadEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cordiccart2pol_faeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cordiccart2pol_fmfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cordiccart2pol_fdg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cordiccart2pol_fchbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cordiccart2pol_Kvbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cordiccart2pol_ancud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Kvalues_U : component cordiccart2pol_Kvbkb
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Kvalues_address0,
        ce0 => Kvalues_ce0,
        q0 => Kvalues_q0);

    angles_U : component cordiccart2pol_ancud
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => angles_address0,
        ce0 => angles_ce0,
        q0 => angles_q0);

    cordiccart2pol_fadEe_U1 : component cordiccart2pol_fadEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_155_p0,
        din1 => grp_fu_155_p1,
        opcode => grp_fu_155_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_155_p2);

    cordiccart2pol_faeOg_U2 : component cordiccart2pol_faeOg
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_206,
        din1 => currenty_2_reg_124,
        ce => ap_const_logic_1,
        dout => grp_fu_161_p2);

    cordiccart2pol_fmfYi_U3 : component cordiccart2pol_fmfYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_166_p0,
        din1 => grp_fu_166_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_166_p2);

    cordiccart2pol_fmfYi_U4 : component cordiccart2pol_fmfYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_171_p0,
        din1 => grp_fu_171_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_171_p2);

    cordiccart2pol_fmfYi_U5 : component cordiccart2pol_fmfYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_176_p0,
        din1 => angles_load_reg_525,
        ce => ap_const_logic_1,
        dout => grp_fu_176_p2);

    cordiccart2pol_fdg8j_U6 : component cordiccart2pol_fdg8j
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => temp_cos_reg_114,
        din1 => ap_const_lv32_3FD2C90A,
        ce => ap_const_logic_1,
        dout => grp_fu_180_p2);

    cordiccart2pol_fchbi_U7 : component cordiccart2pol_fchbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_187_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => grp_fu_187_opcode,
        dout => grp_fu_187_p2);

    cordiccart2pol_fchbi_U8 : component cordiccart2pol_fchbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_5,
        dout => grp_fu_193_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    currenty_2_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                currenty_2_reg_124 <= select_ln24_1_fu_338_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                currenty_2_reg_124 <= grp_fu_161_p2;
            end if; 
        end if;
    end process;

    i_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_144 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_0_reg_144 <= i_reg_489;
            end if; 
        end if;
    end process;

    temp_cos_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                temp_cos_reg_114 <= select_ln24_fu_325_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                temp_cos_reg_114 <= grp_fu_155_p2;
            end if; 
        end if;
    end process;

    theta1_2_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                theta1_2_reg_134 <= select_ln24_2_fu_354_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                theta1_2_reg_134 <= theta1_reg_542;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                angles_load_reg_525 <= angles_q0;
                factor_reg_519 <= Kvalues_q0;
                icmp_ln41_1_reg_509 <= icmp_ln41_1_fu_404_p2;
                icmp_ln41_reg_504 <= icmp_ln41_fu_398_p2;
                tmp_10_reg_514 <= grp_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_489 <= i_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_200 <= grp_fu_166_p2;
                reg_206 <= grp_fu_171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                theta1_reg_542 <= grp_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_1_reg_461 <= grp_fu_187_p2;
                tmp_6_reg_466 <= grp_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_3_reg_537 <= grp_fu_176_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln39_fu_362_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln39_fu_362_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Kvalues_address0 <= zext_ln42_fu_374_p1(4 - 1 downto 0);

    Kvalues_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Kvalues_ce0 <= ap_const_logic_1;
        else 
            Kvalues_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln16_fu_247_p2 <= (tmp_1_reg_461 and or_ln16_fu_241_p2);
    and_ln24_fu_287_p2 <= (tmp_6_reg_466 and or_ln24_fu_281_p2);
    and_ln41_fu_414_p2 <= (tmp_10_reg_514 and or_ln41_fu_410_p2);
    angles_address0 <= zext_ln42_fu_374_p1(4 - 1 downto 0);

    angles_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            angles_ce0 <= ap_const_logic_1;
        else 
            angles_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln16_fu_212_p1 <= x;
    bitcast_ln24_fu_252_p1 <= y;
    bitcast_ln41_fu_380_p1 <= currenty_2_reg_124;
    bitcast_ln54_fu_430_p1 <= theta1_2_reg_134;
    currentx_fu_308_p1 <= xor_ln26_fu_302_p2;
    currenty_fu_298_p1 <= xor_ln33_fu_292_p2;

    grp_fu_155_opcode_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_155_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_155_opcode <= ap_const_lv2_0;
        else 
            grp_fu_155_opcode <= "XX";
        end if; 
    end process;


    grp_fu_155_p0_assign_proc : process(ap_CS_fsm_state14, temp_cos_reg_114, theta1_2_reg_134, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_155_p0 <= temp_cos_reg_114;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_155_p0 <= theta1_2_reg_134;
        else 
            grp_fu_155_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_155_p1_assign_proc : process(reg_200, tmp_3_reg_537, ap_CS_fsm_state14, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_155_p1 <= reg_200;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_155_p1 <= tmp_3_reg_537;
        else 
            grp_fu_155_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_166_p0_assign_proc : process(reg_200, ap_CS_fsm_state6, currenty_2_reg_124, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_166_p0 <= reg_200;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_166_p0 <= currenty_2_reg_124;
        else 
            grp_fu_166_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_166_p1_assign_proc : process(factor_reg_519, select_ln46_fu_419_p3, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_166_p1 <= factor_reg_519;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_166_p1 <= select_ln46_fu_419_p3;
        else 
            grp_fu_166_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_171_p0_assign_proc : process(reg_206, ap_CS_fsm_state6, temp_cos_reg_114, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_171_p0 <= reg_206;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_171_p0 <= temp_cos_reg_114;
        else 
            grp_fu_171_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_171_p1_assign_proc : process(factor_reg_519, select_ln46_fu_419_p3, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_171_p1 <= factor_reg_519;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_171_p1 <= select_ln46_fu_419_p3;
        else 
            grp_fu_171_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_176_p0 <= 
        ap_const_lv32_3F800000 when (and_ln41_fu_414_p2(0) = '1') else 
        ap_const_lv32_BF800000;

    grp_fu_187_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln39_fu_362_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln39_fu_362_p2 = ap_const_lv1_0))) then 
            grp_fu_187_opcode <= ap_const_lv5_4;
        elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_187_opcode <= ap_const_lv5_3;
        else 
            grp_fu_187_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_187_p0_assign_proc : process(ap_CS_fsm_state1, x, ap_CS_fsm_state4, currenty_2_reg_124)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_187_p0 <= currenty_2_reg_124;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_187_p0 <= x;
        else 
            grp_fu_187_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_368_p2 <= std_logic_vector(unsigned(i_0_reg_144) + unsigned(ap_const_lv5_1));
    icmp_ln16_1_fu_235_p2 <= "1" when (trunc_ln16_fu_225_p1 = ap_const_lv23_0) else "0";
    icmp_ln16_fu_229_p2 <= "0" when (tmp_fu_215_p4 = ap_const_lv8_FF) else "1";
    icmp_ln24_1_fu_275_p2 <= "1" when (trunc_ln24_fu_265_p1 = ap_const_lv23_0) else "0";
    icmp_ln24_fu_269_p2 <= "0" when (tmp_5_fu_255_p4 = ap_const_lv8_FF) else "1";
    icmp_ln39_fu_362_p2 <= "1" when (i_0_reg_144 = ap_const_lv5_10) else "0";
    icmp_ln41_1_fu_404_p2 <= "1" when (trunc_ln41_fu_394_p1 = ap_const_lv23_0) else "0";
    icmp_ln41_fu_398_p2 <= "0" when (tmp_9_fu_384_p4 = ap_const_lv8_FF) else "1";
    or_ln16_fu_241_p2 <= (icmp_ln16_fu_229_p2 or icmp_ln16_1_fu_235_p2);
    or_ln24_1_fu_319_p2 <= (and_ln24_fu_287_p2 or and_ln16_fu_247_p2);
    or_ln24_fu_281_p2 <= (icmp_ln24_fu_269_p2 or icmp_ln24_1_fu_275_p2);
    or_ln41_fu_410_p2 <= (icmp_ln41_reg_504 or icmp_ln41_1_reg_509);
    r <= grp_fu_180_p2;

    r_ap_vld_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            r_ap_vld <= ap_const_logic_1;
        else 
            r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln16_1_fu_332_p3 <= 
        y when (and_ln16_fu_247_p2(0) = '1') else 
        x;
    select_ln16_2_fu_346_p3 <= 
        ap_const_lv32_0 when (and_ln16_fu_247_p2(0) = '1') else 
        ap_const_lv32_3FC90FDB;
    select_ln16_fu_312_p3 <= 
        x when (and_ln16_fu_247_p2(0) = '1') else 
        currentx_fu_308_p1;
    select_ln24_1_fu_338_p3 <= 
        select_ln16_1_fu_332_p3 when (or_ln24_1_fu_319_p2(0) = '1') else 
        currenty_fu_298_p1;
    select_ln24_2_fu_354_p3 <= 
        select_ln16_2_fu_346_p3 when (or_ln24_1_fu_319_p2(0) = '1') else 
        ap_const_lv32_BFC90FDB;
    select_ln24_fu_325_p3 <= 
        select_ln16_fu_312_p3 when (or_ln24_1_fu_319_p2(0) = '1') else 
        y;
    select_ln46_fu_419_p3 <= 
        ap_const_lv32_3F800000 when (and_ln41_fu_414_p2(0) = '1') else 
        ap_const_lv32_BF800000;
    theta <= xor_ln54_fu_434_p2;

    theta_ap_vld_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            theta_ap_vld <= ap_const_logic_1;
        else 
            theta_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_5_fu_255_p4 <= bitcast_ln24_fu_252_p1(30 downto 23);
    tmp_9_fu_384_p4 <= bitcast_ln41_fu_380_p1(30 downto 23);
    tmp_fu_215_p4 <= bitcast_ln16_fu_212_p1(30 downto 23);
    trunc_ln16_fu_225_p1 <= bitcast_ln16_fu_212_p1(23 - 1 downto 0);
    trunc_ln24_fu_265_p1 <= bitcast_ln24_fu_252_p1(23 - 1 downto 0);
    trunc_ln41_fu_394_p1 <= bitcast_ln41_fu_380_p1(23 - 1 downto 0);
    xor_ln26_fu_302_p2 <= (bitcast_ln24_fu_252_p1 xor ap_const_lv32_80000000);
    xor_ln33_fu_292_p2 <= (bitcast_ln16_fu_212_p1 xor ap_const_lv32_80000000);
    xor_ln54_fu_434_p2 <= (bitcast_ln54_fu_430_p1 xor ap_const_lv32_80000000);
    zext_ln42_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_144),64));
end behav;
