// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fir_HH_
#define _fir_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fir_ap_start_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AP_START_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AP_START_DATA_WIDTH = 32>
struct fir : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_ap_start_AWVALID;
    sc_out< sc_logic > s_axi_ap_start_AWREADY;
    sc_in< sc_uint<C_S_AXI_AP_START_ADDR_WIDTH> > s_axi_ap_start_AWADDR;
    sc_in< sc_logic > s_axi_ap_start_WVALID;
    sc_out< sc_logic > s_axi_ap_start_WREADY;
    sc_in< sc_uint<C_S_AXI_AP_START_DATA_WIDTH> > s_axi_ap_start_WDATA;
    sc_in< sc_uint<C_S_AXI_AP_START_DATA_WIDTH/8> > s_axi_ap_start_WSTRB;
    sc_in< sc_logic > s_axi_ap_start_ARVALID;
    sc_out< sc_logic > s_axi_ap_start_ARREADY;
    sc_in< sc_uint<C_S_AXI_AP_START_ADDR_WIDTH> > s_axi_ap_start_ARADDR;
    sc_out< sc_logic > s_axi_ap_start_RVALID;
    sc_in< sc_logic > s_axi_ap_start_RREADY;
    sc_out< sc_uint<C_S_AXI_AP_START_DATA_WIDTH> > s_axi_ap_start_RDATA;
    sc_out< sc_lv<2> > s_axi_ap_start_RRESP;
    sc_out< sc_logic > s_axi_ap_start_BVALID;
    sc_in< sc_logic > s_axi_ap_start_BREADY;
    sc_out< sc_lv<2> > s_axi_ap_start_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    fir(sc_module_name name);
    SC_HAS_PROCESS(fir);

    ~fir();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    fir_ap_start_s_axi<C_S_AXI_AP_START_ADDR_WIDTH,C_S_AXI_AP_START_DATA_WIDTH>* fir_ap_start_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > y_V;
    sc_signal< sc_logic > y_V_ap_vld;
    sc_signal< sc_lv<32> > x_V;
    sc_signal< sc_lv<32> > shift_reg_V_9;
    sc_signal< sc_lv<32> > shift_reg_V_8;
    sc_signal< sc_lv<32> > shift_reg_V_7;
    sc_signal< sc_lv<32> > shift_reg_V_6;
    sc_signal< sc_lv<32> > shift_reg_V_5;
    sc_signal< sc_lv<32> > shift_reg_V_4;
    sc_signal< sc_lv<32> > shift_reg_V_3;
    sc_signal< sc_lv<32> > shift_reg_V_2;
    sc_signal< sc_lv<32> > shift_reg_V_1;
    sc_signal< sc_lv<32> > shift_reg_V_0;
    sc_signal< sc_lv<32> > x_V_read_reg_233;
    sc_signal< sc_lv<32> > shift_reg_V_4_load_reg_239;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > mul_ln700_3_fu_114_p2;
    sc_signal< sc_lv<32> > mul_ln700_3_reg_244;
    sc_signal< sc_lv<32> > mul_ln700_4_fu_120_p2;
    sc_signal< sc_lv<32> > mul_ln700_4_reg_249;
    sc_signal< sc_lv<32> > mul_ln700_5_fu_126_p2;
    sc_signal< sc_lv<32> > mul_ln700_5_reg_254;
    sc_signal< sc_lv<32> > mul_ln700_6_fu_132_p2;
    sc_signal< sc_lv<32> > mul_ln700_6_reg_259;
    sc_signal< sc_lv<32> > mul_ln700_fu_186_p2;
    sc_signal< sc_lv<32> > mul_ln700_reg_264;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > mul_ln700_1_fu_192_p2;
    sc_signal< sc_lv<32> > mul_ln700_1_reg_269;
    sc_signal< sc_lv<32> > mul_ln700_2_fu_198_p2;
    sc_signal< sc_lv<32> > mul_ln700_2_reg_274;
    sc_signal< sc_lv<32> > add_ln700_4_fu_212_p2;
    sc_signal< sc_lv<32> > add_ln700_4_reg_279;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > mul_ln700_3_fu_114_p0;
    sc_signal< sc_lv<32> > mul_ln700_4_fu_120_p0;
    sc_signal< sc_lv<32> > mul_ln700_5_fu_126_p0;
    sc_signal< sc_lv<32> > mul_ln700_fu_186_p0;
    sc_signal< sc_lv<32> > mul_ln700_1_fu_192_p0;
    sc_signal< sc_lv<32> > mul_ln700_2_fu_198_p0;
    sc_signal< sc_lv<32> > add_ln700_3_fu_208_p2;
    sc_signal< sc_lv<32> > add_ln700_2_fu_204_p2;
    sc_signal< sc_lv<32> > add_ln700_fu_218_p2;
    sc_signal< sc_lv<32> > add_ln700_1_fu_222_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1F4;
    static const sc_lv<32> ap_const_lv32_139;
    static const sc_lv<32> ap_const_lv32_FFFFFFA5;
    static const sc_lv<32> ap_const_lv32_35;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln700_1_fu_222_p2();
    void thread_add_ln700_2_fu_204_p2();
    void thread_add_ln700_3_fu_208_p2();
    void thread_add_ln700_4_fu_212_p2();
    void thread_add_ln700_fu_218_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_mul_ln700_1_fu_192_p0();
    void thread_mul_ln700_1_fu_192_p2();
    void thread_mul_ln700_2_fu_198_p0();
    void thread_mul_ln700_2_fu_198_p2();
    void thread_mul_ln700_3_fu_114_p0();
    void thread_mul_ln700_3_fu_114_p2();
    void thread_mul_ln700_4_fu_120_p0();
    void thread_mul_ln700_4_fu_120_p2();
    void thread_mul_ln700_5_fu_126_p0();
    void thread_mul_ln700_5_fu_126_p2();
    void thread_mul_ln700_6_fu_132_p2();
    void thread_mul_ln700_fu_186_p0();
    void thread_mul_ln700_fu_186_p2();
    void thread_y_V();
    void thread_y_V_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
