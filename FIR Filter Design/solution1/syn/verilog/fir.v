// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=14,HLS_SYN_FF=754,HLS_SYN_LUT=541,HLS_VERSION=2020_1}" *)

module fir (
        ap_clk,
        ap_rst_n,
        s_axi_ap_start_AWVALID,
        s_axi_ap_start_AWREADY,
        s_axi_ap_start_AWADDR,
        s_axi_ap_start_WVALID,
        s_axi_ap_start_WREADY,
        s_axi_ap_start_WDATA,
        s_axi_ap_start_WSTRB,
        s_axi_ap_start_ARVALID,
        s_axi_ap_start_ARREADY,
        s_axi_ap_start_ARADDR,
        s_axi_ap_start_RVALID,
        s_axi_ap_start_RREADY,
        s_axi_ap_start_RDATA,
        s_axi_ap_start_RRESP,
        s_axi_ap_start_BVALID,
        s_axi_ap_start_BREADY,
        s_axi_ap_start_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;
parameter    C_S_AXI_AP_START_DATA_WIDTH = 32;
parameter    C_S_AXI_AP_START_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AP_START_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_ap_start_AWVALID;
output   s_axi_ap_start_AWREADY;
input  [C_S_AXI_AP_START_ADDR_WIDTH - 1:0] s_axi_ap_start_AWADDR;
input   s_axi_ap_start_WVALID;
output   s_axi_ap_start_WREADY;
input  [C_S_AXI_AP_START_DATA_WIDTH - 1:0] s_axi_ap_start_WDATA;
input  [C_S_AXI_AP_START_WSTRB_WIDTH - 1:0] s_axi_ap_start_WSTRB;
input   s_axi_ap_start_ARVALID;
output   s_axi_ap_start_ARREADY;
input  [C_S_AXI_AP_START_ADDR_WIDTH - 1:0] s_axi_ap_start_ARADDR;
output   s_axi_ap_start_RVALID;
input   s_axi_ap_start_RREADY;
output  [C_S_AXI_AP_START_DATA_WIDTH - 1:0] s_axi_ap_start_RDATA;
output  [1:0] s_axi_ap_start_RRESP;
output   s_axi_ap_start_BVALID;
input   s_axi_ap_start_BREADY;
output  [1:0] s_axi_ap_start_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] y_V;
reg    y_V_ap_vld;
wire   [31:0] x_V;
reg   [31:0] shift_reg_V_9;
reg   [31:0] shift_reg_V_8;
reg   [31:0] shift_reg_V_7;
reg   [31:0] shift_reg_V_6;
reg   [31:0] shift_reg_V_5;
reg   [31:0] shift_reg_V_4;
reg   [31:0] shift_reg_V_3;
reg   [31:0] shift_reg_V_2;
reg   [31:0] shift_reg_V_1;
reg   [31:0] shift_reg_V_0;
reg  signed [31:0] x_V_read_reg_233;
reg  signed [31:0] shift_reg_V_4_load_reg_239;
wire    ap_CS_fsm_state2;
wire   [31:0] mul_ln700_3_fu_114_p2;
reg   [31:0] mul_ln700_3_reg_244;
wire   [31:0] mul_ln700_4_fu_120_p2;
reg   [31:0] mul_ln700_4_reg_249;
wire   [31:0] mul_ln700_5_fu_126_p2;
reg   [31:0] mul_ln700_5_reg_254;
wire   [31:0] mul_ln700_6_fu_132_p2;
reg   [31:0] mul_ln700_6_reg_259;
wire   [31:0] mul_ln700_fu_186_p2;
reg   [31:0] mul_ln700_reg_264;
wire    ap_CS_fsm_state3;
wire   [31:0] mul_ln700_1_fu_192_p2;
reg   [31:0] mul_ln700_1_reg_269;
wire   [31:0] mul_ln700_2_fu_198_p2;
reg   [31:0] mul_ln700_2_reg_274;
wire   [31:0] add_ln700_4_fu_212_p2;
reg   [31:0] add_ln700_4_reg_279;
wire    ap_CS_fsm_state4;
wire  signed [31:0] mul_ln700_3_fu_114_p0;
wire  signed [31:0] mul_ln700_4_fu_120_p0;
wire  signed [31:0] mul_ln700_5_fu_126_p0;
wire  signed [31:0] mul_ln700_fu_186_p0;
wire  signed [31:0] mul_ln700_1_fu_192_p0;
wire  signed [31:0] mul_ln700_2_fu_198_p0;
wire   [31:0] add_ln700_3_fu_208_p2;
wire   [31:0] add_ln700_2_fu_204_p2;
wire   [31:0] add_ln700_fu_218_p2;
wire   [31:0] add_ln700_1_fu_222_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 shift_reg_V_9 = 32'd0;
#0 shift_reg_V_8 = 32'd0;
#0 shift_reg_V_7 = 32'd0;
#0 shift_reg_V_6 = 32'd0;
#0 shift_reg_V_5 = 32'd0;
#0 shift_reg_V_4 = 32'd0;
#0 shift_reg_V_3 = 32'd0;
#0 shift_reg_V_2 = 32'd0;
#0 shift_reg_V_1 = 32'd0;
#0 shift_reg_V_0 = 32'd0;
end

fir_ap_start_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AP_START_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AP_START_DATA_WIDTH ))
fir_ap_start_s_axi_U(
    .AWVALID(s_axi_ap_start_AWVALID),
    .AWREADY(s_axi_ap_start_AWREADY),
    .AWADDR(s_axi_ap_start_AWADDR),
    .WVALID(s_axi_ap_start_WVALID),
    .WREADY(s_axi_ap_start_WREADY),
    .WDATA(s_axi_ap_start_WDATA),
    .WSTRB(s_axi_ap_start_WSTRB),
    .ARVALID(s_axi_ap_start_ARVALID),
    .ARREADY(s_axi_ap_start_ARREADY),
    .ARADDR(s_axi_ap_start_ARADDR),
    .RVALID(s_axi_ap_start_RVALID),
    .RREADY(s_axi_ap_start_RREADY),
    .RDATA(s_axi_ap_start_RDATA),
    .RRESP(s_axi_ap_start_RRESP),
    .BVALID(s_axi_ap_start_BVALID),
    .BREADY(s_axi_ap_start_BREADY),
    .BRESP(s_axi_ap_start_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .y_V(y_V),
    .y_V_ap_vld(y_V_ap_vld),
    .x_V(x_V)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln700_4_reg_279 <= add_ln700_4_fu_212_p2;
        mul_ln700_1_reg_269 <= mul_ln700_1_fu_192_p2;
        mul_ln700_2_reg_274 <= mul_ln700_2_fu_198_p2;
        mul_ln700_reg_264 <= mul_ln700_fu_186_p2;
        shift_reg_V_5 <= shift_reg_V_4_load_reg_239;
        shift_reg_V_6 <= shift_reg_V_5;
        shift_reg_V_7 <= shift_reg_V_6;
        shift_reg_V_8 <= shift_reg_V_7;
        shift_reg_V_9 <= shift_reg_V_8;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mul_ln700_3_reg_244[31 : 2] <= mul_ln700_3_fu_114_p2[31 : 2];
        mul_ln700_4_reg_249 <= mul_ln700_4_fu_120_p2;
        mul_ln700_5_reg_254 <= mul_ln700_5_fu_126_p2;
        mul_ln700_6_reg_259 <= mul_ln700_6_fu_132_p2;
        shift_reg_V_0 <= x_V_read_reg_233;
        shift_reg_V_1 <= shift_reg_V_0;
        shift_reg_V_2 <= shift_reg_V_1;
        shift_reg_V_3 <= shift_reg_V_2;
        shift_reg_V_4 <= shift_reg_V_3;
        shift_reg_V_4_load_reg_239 <= shift_reg_V_4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_V_read_reg_233 <= x_V;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_V_ap_vld = 1'b1;
    end else begin
        y_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln700_1_fu_222_p2 = (add_ln700_fu_218_p2 + mul_ln700_reg_264);

assign add_ln700_2_fu_204_p2 = (mul_ln700_3_reg_244 + mul_ln700_4_reg_249);

assign add_ln700_3_fu_208_p2 = (mul_ln700_5_reg_254 + mul_ln700_6_reg_259);

assign add_ln700_4_fu_212_p2 = (add_ln700_3_fu_208_p2 + add_ln700_2_fu_204_p2);

assign add_ln700_fu_218_p2 = (mul_ln700_1_reg_269 + mul_ln700_2_reg_274);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign mul_ln700_1_fu_192_p0 = shift_reg_V_7;

assign mul_ln700_1_fu_192_p2 = ($signed(mul_ln700_1_fu_192_p0) * $signed(-'h5B));

assign mul_ln700_2_fu_198_p0 = shift_reg_V_5;

assign mul_ln700_2_fu_198_p2 = ($signed(mul_ln700_2_fu_198_p0) * $signed('h139));

assign mul_ln700_3_fu_114_p0 = shift_reg_V_4;

assign mul_ln700_3_fu_114_p2 = ($signed(mul_ln700_3_fu_114_p0) * $signed('h1F4));

assign mul_ln700_4_fu_120_p0 = shift_reg_V_3;

assign mul_ln700_4_fu_120_p2 = ($signed(mul_ln700_4_fu_120_p0) * $signed('h139));

assign mul_ln700_5_fu_126_p0 = shift_reg_V_1;

assign mul_ln700_5_fu_126_p2 = ($signed(mul_ln700_5_fu_126_p0) * $signed(-'h5B));

assign mul_ln700_6_fu_132_p2 = ($signed(x_V_read_reg_233) * $signed('h35));

assign mul_ln700_fu_186_p0 = shift_reg_V_9;

assign mul_ln700_fu_186_p2 = ($signed(mul_ln700_fu_186_p0) * $signed('h35));

assign y_V = (add_ln700_4_reg_279 + add_ln700_1_fu_222_p2);

always @ (posedge ap_clk) begin
    mul_ln700_3_reg_244[1:0] <= 2'b00;
end

endmodule //fir
