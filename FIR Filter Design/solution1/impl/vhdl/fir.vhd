-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
generic (
    C_S_AXI_AP_START_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AP_START_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_ap_start_AWVALID : IN STD_LOGIC;
    s_axi_ap_start_AWREADY : OUT STD_LOGIC;
    s_axi_ap_start_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AP_START_ADDR_WIDTH-1 downto 0);
    s_axi_ap_start_WVALID : IN STD_LOGIC;
    s_axi_ap_start_WREADY : OUT STD_LOGIC;
    s_axi_ap_start_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AP_START_DATA_WIDTH-1 downto 0);
    s_axi_ap_start_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AP_START_DATA_WIDTH/8-1 downto 0);
    s_axi_ap_start_ARVALID : IN STD_LOGIC;
    s_axi_ap_start_ARREADY : OUT STD_LOGIC;
    s_axi_ap_start_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AP_START_ADDR_WIDTH-1 downto 0);
    s_axi_ap_start_RVALID : OUT STD_LOGIC;
    s_axi_ap_start_RREADY : IN STD_LOGIC;
    s_axi_ap_start_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AP_START_DATA_WIDTH-1 downto 0);
    s_axi_ap_start_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ap_start_BVALID : OUT STD_LOGIC;
    s_axi_ap_start_BREADY : IN STD_LOGIC;
    s_axi_ap_start_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=14,HLS_SYN_FF=754,HLS_SYN_LUT=541,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110100";
    constant ap_const_lv32_139 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111001";
    constant ap_const_lv32_FFFFFFA5 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110100101";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal y_V : STD_LOGIC_VECTOR (31 downto 0);
    signal y_V_ap_vld : STD_LOGIC;
    signal x_V : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_V_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x_V_read_reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_V_4_load_reg_239 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln700_3_fu_114_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_3_reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_4_fu_120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_4_reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_5_fu_126_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_5_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_6_fu_132_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_6_reg_259 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mul_ln700_1_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_1_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_2_fu_198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_2_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_4_fu_212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_4_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal mul_ln700_3_fu_114_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_4_fu_120_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_5_fu_126_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_fu_186_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_1_fu_192_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_2_fu_198_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_3_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_2_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_fu_218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_1_fu_222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component fir_ap_start_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        y_V : IN STD_LOGIC_VECTOR (31 downto 0);
        y_V_ap_vld : IN STD_LOGIC;
        x_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fir_ap_start_s_axi_U : component fir_ap_start_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AP_START_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AP_START_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ap_start_AWVALID,
        AWREADY => s_axi_ap_start_AWREADY,
        AWADDR => s_axi_ap_start_AWADDR,
        WVALID => s_axi_ap_start_WVALID,
        WREADY => s_axi_ap_start_WREADY,
        WDATA => s_axi_ap_start_WDATA,
        WSTRB => s_axi_ap_start_WSTRB,
        ARVALID => s_axi_ap_start_ARVALID,
        ARREADY => s_axi_ap_start_ARREADY,
        ARADDR => s_axi_ap_start_ARADDR,
        RVALID => s_axi_ap_start_RVALID,
        RREADY => s_axi_ap_start_RREADY,
        RDATA => s_axi_ap_start_RDATA,
        RRESP => s_axi_ap_start_RRESP,
        BVALID => s_axi_ap_start_BVALID,
        BREADY => s_axi_ap_start_BREADY,
        BRESP => s_axi_ap_start_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        y_V => y_V,
        y_V_ap_vld => y_V_ap_vld,
        x_V => x_V);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln700_4_reg_279 <= add_ln700_4_fu_212_p2;
                mul_ln700_1_reg_269 <= mul_ln700_1_fu_192_p2;
                mul_ln700_2_reg_274 <= mul_ln700_2_fu_198_p2;
                mul_ln700_reg_264 <= mul_ln700_fu_186_p2;
                shift_reg_V_5 <= shift_reg_V_4_load_reg_239;
                shift_reg_V_6 <= shift_reg_V_5;
                shift_reg_V_7 <= shift_reg_V_6;
                shift_reg_V_8 <= shift_reg_V_7;
                shift_reg_V_9 <= shift_reg_V_8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    mul_ln700_3_reg_244(31 downto 2) <= mul_ln700_3_fu_114_p2(31 downto 2);
                mul_ln700_4_reg_249 <= mul_ln700_4_fu_120_p2;
                mul_ln700_5_reg_254 <= mul_ln700_5_fu_126_p2;
                mul_ln700_6_reg_259 <= mul_ln700_6_fu_132_p2;
                shift_reg_V_0 <= x_V_read_reg_233;
                shift_reg_V_1 <= shift_reg_V_0;
                shift_reg_V_2 <= shift_reg_V_1;
                shift_reg_V_3 <= shift_reg_V_2;
                shift_reg_V_4 <= shift_reg_V_3;
                shift_reg_V_4_load_reg_239 <= shift_reg_V_4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                x_V_read_reg_233 <= x_V;
            end if;
        end if;
    end process;
    mul_ln700_3_reg_244(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln700_1_fu_222_p2 <= std_logic_vector(unsigned(add_ln700_fu_218_p2) + unsigned(mul_ln700_reg_264));
    add_ln700_2_fu_204_p2 <= std_logic_vector(unsigned(mul_ln700_3_reg_244) + unsigned(mul_ln700_4_reg_249));
    add_ln700_3_fu_208_p2 <= std_logic_vector(unsigned(mul_ln700_5_reg_254) + unsigned(mul_ln700_6_reg_259));
    add_ln700_4_fu_212_p2 <= std_logic_vector(unsigned(add_ln700_3_fu_208_p2) + unsigned(add_ln700_2_fu_204_p2));
    add_ln700_fu_218_p2 <= std_logic_vector(unsigned(mul_ln700_1_reg_269) + unsigned(mul_ln700_2_reg_274));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    mul_ln700_1_fu_192_p0 <= shift_reg_V_7;
    mul_ln700_1_fu_192_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_1_fu_192_p0) * signed(ap_const_lv32_FFFFFFA5))), 32));
    mul_ln700_2_fu_198_p0 <= shift_reg_V_5;
    mul_ln700_2_fu_198_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_2_fu_198_p0) * signed('0' &ap_const_lv32_139))), 32));
    mul_ln700_3_fu_114_p0 <= shift_reg_V_4;
    mul_ln700_3_fu_114_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_3_fu_114_p0) * signed('0' &ap_const_lv32_1F4))), 32));
    mul_ln700_4_fu_120_p0 <= shift_reg_V_3;
    mul_ln700_4_fu_120_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_4_fu_120_p0) * signed('0' &ap_const_lv32_139))), 32));
    mul_ln700_5_fu_126_p0 <= shift_reg_V_1;
    mul_ln700_5_fu_126_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_5_fu_126_p0) * signed(ap_const_lv32_FFFFFFA5))), 32));
    mul_ln700_6_fu_132_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(x_V_read_reg_233) * signed('0' &ap_const_lv32_35))), 32));
    mul_ln700_fu_186_p0 <= shift_reg_V_9;
    mul_ln700_fu_186_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_fu_186_p0) * signed('0' &ap_const_lv32_35))), 32));
    y_V <= std_logic_vector(unsigned(add_ln700_4_reg_279) + unsigned(add_ln700_1_fu_222_p2));

    y_V_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_V_ap_vld <= ap_const_logic_1;
        else 
            y_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
